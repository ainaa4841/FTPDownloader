import os
import time
from ftplib import FTP
from datetime import timedelta

_cancel = False

def set_cancel():
    """Set the cancel flag to stop downloads gracefully."""
    global _cancel
    _cancel = True

def ftp_connect(host, user, passwd, retries=3, delay=5):
    """Connect to FTP with retry logic."""
    last_exc = None
    for _ in range(retries):
        try:
            ftp = FTP(host, timeout=30)
            ftp.login(user, passwd)
            return ftp
        except Exception as e:
            last_exc = e
            time.sleep(delay)
    raise ConnectionError(f"FTP connection failed: {last_exc}")

def download_file(ftp, remote_file, local_file):
    """Download a single file from FTP."""
    with open(local_file, "wb") as f:
        ftp.retrbinary(f"RETR {remote_file}", f.write)

def download_files_range(host, user, passwd,
                         station_id, start_date, end_date,
                         start_hour, end_hour, remote_base,
                         progress_callback=None):
    """
    Download files from FTP server between date range.
    Handles quarter-hour intervals (00, 15, 30, 45).
    """
    global _cancel
    _cancel = False

    ftp = ftp_connect(host, user, passwd)

    downloaded = []
    failed = []

    # Base local folder
    local_base = os.path.join("stations", station_id)
    os.makedirs(local_base, exist_ok=True)

    # Generate datetime range
    current_dt = start_date.replace(hour=start_hour, minute=0)
    end_dt = end_date.replace(hour=end_hour, minute=45)  # include last quarter

    total = 0
    dt_list = []

    while current_dt <= end_dt:
        dt_list.append(current_dt)
        current_dt += timedelta(minutes=15)  # step in quarters

    total = len(dt_list)
    current = 0

    for dt in dt_list:
        if _cancel:
            break

        # Remote file path (adjust to your server's naming convention)
        # Example: /forecast/stations/{station_id}/YYYY/MM/DD/stationid_YYYYMMDD_HHMM.txt
        remote_file = f"{remote_base}/{station_id}/{dt.strftime('%Y/%m/%d')}/{station_id}_{dt.strftime('%Y%m%d_%H%M')}.txt"

        # Local save path
        local_dir = os.path.join(local_base, dt.strftime("%Y%m%d"))
        os.makedirs(local_dir, exist_ok=True)
        local_file = os.path.join(local_dir, f"{station_id}_{dt.strftime('%Y%m%d_%H%M')}.txt")

        try:
            download_file(ftp, remote_file, local_file)
            downloaded.append(local_file)
        except Exception as e:
            failed.append(remote_file)

        current += 1
        if progress_callback:
            progress_callback(current, total, os.path.basename(remote_file))

    ftp.quit()
    return downloaded, failed